[{"content":"","date":"2025-04-07","id":0,"permalink":"/docs/introduction/","summary":"","tags":[],"title":"Introduction"},{"content":"\r주의! 이 글은 주저리 주저리 글입니다.\n별로 안 궁금하다면 그냥 다음 글부터 보세요.\n시작하기에 앞서, 클라우드는 비쌉니다. 정말 비쌉니다.\n저는 AWS를 한 7년정도 사용했고, 일반적으로 사용하는 서비스라면 (EC2, Fargate, RDS..) 스펙에 맞춰 대략적인 가격을 외울 수 있을 정도입니다. 지금은 서버 개발자로 돈을 벌고 있기도 하구요.\n하지만 많은 시작하는 사람들은 그렇지 않겠죠. 일반적으로 요금 폭탄을 맞을까봐 걱정하는 경우가 많을 것이라고 생각합니다. 실제로 그런 경우도 꽤 있구요.\n저도 비슷했습니다. 그래서 저는 클라우드 서비스의 대안으로 홈 서버도 한 6년 정도 운영했습니다. 마인크래프트 서버 돌리기 위한 2200G 달린 데스크톱 한대부터, 지금에 이르기까지 꽤 많은 삽질을 했습니다.\n굳이 고생을 왜 사서 하냐고 물어보면 딱히 저도 할 말은 없지만, 그래도 하다 보면 꽤 재밌습니다.\n해외에서 자료를 찾을땐 Rpi4Cluster 나, home-ops Github 리포지토리, reddit의 r/homelab 채널과 같은 자료를 찾을 수 있는 곳이 꽤 있는데, 한국어로 된 자료는 꽤 찾아보기 어렵더라구요.\n제가 처음 홈 클러스터를 구축하기 시작한게 2023년 2월이었는데요, 대략 2년이 지났고 꽤 많은 문제를 풀어냈고, 경험치가 많이 쌓였다고 생각합니다.\n제가 지금까지 했던 삽질과 고생을(\u0026hellip;) 혼자만 알기 억울한것도 있고, 같이 취미생활을 즐기는 사람이 늘어났으면 하는 것도 있습니다.\n그리고, 혹시라도 인프라를 공부하는 사람이 있다면, 도움이 되었으면 하는 것도 있습니다.\n쿠버네티스 같은 기술은 배우는 비용이 기술적 해자라고 생각하거든요. EKS에서 Worker Node 없이 Contol Plane만 빌려도 한달에 72$가 나옵니다. Worker Node를 단 한 대도 사용하지 않아도요!\n그러다 보니 배우고 싶어도 가격이 무서워서 움츠러들기 마련이고, 장기 운용 경험치는 꿈도 못 꾸죠. Kubectl이나 Helm을 이용해서 배포는 해 볼 수 있는데, 정작 중요한 1년, 2년씩 운용해보는 경험. 트러블슈팅 해 보는 경험을 얻기는 어려운게 현실입니다.\n물론 Vagrant같은 방법을 이용해서 가상 VM을 띄우는 방법도 있겠지만, 이것도 실제로 네트워크 망을 구성해보는 경험을 하기엔 모자란 부분이 있습니다. 그리고.. Vagrant로 서버 쪼개서 진짜 운용 할거에요..? 진짜..?\n제가 지금 운용하고 있는 홈 서버는, 한달에 전기세만 만원 정도 나오는 것 같습니다. 이것도 제가 3090 달고 있는 x86 컴퓨터가 있어서 그렇지, 아마 Rpi나 N100같은 미니 PC로만 구성한다던가 하면 훨씬 더 쌀 거에요.\n그리고 겸사겸사! Rpi는 간간히 죽습니다! 물리 노드는 멀티탭을 발로 찬다던가, 꽤 많은 사건사고들을 겪을 수 있는 불행한 환경에 처해 있죠. Rpi에서 SD카드 맛 가는 이슈도 꽤 유명하구요. 저는 지금은 다 해결해서 1년 넘게 아무 문제 없이 운영하고 있지만, 저런 지뢰를 한번 밟아보는것도 경험치를 쌓는데 꽤 도움이 될 것이라고 생각합니다. 장애 상황을 만들고, 그걸 복구해보는 경험은 하기 쉽지 않거든요.\n그리고 마지막으로, 이 이야기를 하고 싶습니다.\n저는 서버에 올릴 게 없는데요? 제가 굳이 이걸 해야하나요?\n이건 선후관계가 잘못된겁니다!\n뭔가 너무 올리고 싶은 게 있어서 서버 인프라를 깔아놓는게 아니라, 서버 인프라를 깔았기 때문에 할 수 있는 것들이 생기게 되는 겁니다.\nGithub에서 꽤 괜찮은 프로젝트를 찾았다고 쳐 보죠.\n예를 들어 Google Photo 대체제인 immich 같은 프로젝트가 있겠네요.\n만약 여러분이 아무것도 없었다면, 그냥 구글 포토 쓰지 이걸 왜 씀? 이라고 생각하셨을 겁니다.\n그런데 만약에 여러분이 서버를 깔아뒀다면, 어차피 전기세는 비슷하게 나가는거 한번 깔아볼까? 하는 생각이 들 겁니다. 겸사겸사 이미지 데이터가 서버에 있으면, OCR이라도 돌려서 검색엔진에 인덱싱 해 두면 사진 찾을때 편하겠네요.\n만약에 여러분이 기술에 관심이 있고, 이것저것 해 보는걸 좋아한다면 이 Self-host 서버는 여러분에게 공부든, 성장이든 큰 도움이 될 겁니다. 이건 제가 자신있게 이야기 할 수 있겠네요.\n시작부터 잡설이 너무 길었네요! 다음 글에서 봐요!\n","date":"2025-04-07","id":1,"permalink":"/docs/introduction/%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/","summary":"\u003cdiv class=\"callout callout-tip d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003e주의! 이 글은 주저리 주저리 글입니다.\u003c/p\u003e","tags":[],"title":"시작하며"},{"content":"무엇을 시작하기 전에, 목표를 설정하는 것은 일반적으로 꽤 좋은 방법입니다.\n따라서, 가이드를 시작하기 전에 우리 가이드의 목적에 대해 적어보려고 합니다.\n이 가이드는 다음을 목표로 합니다 구축 비용 효율성 가능한 저렴한 비용으로 클러스터를 구성합니다. Rpi4같은 싱글보드 컴퓨터나 구형 컴퓨터를 이용해 시스템을 구축합니다. 집에 굴러다니는 구형 SSD / HDD나 컴퓨터 바꿔서 버리기 아까운 구형 PC 등도 사용할 수 있습니다. 운영 비용 효율성 가능한 저렴한 비용으로 유지 비용을 구성합니다. 구축이 완료되었을 때, 전기세와 백업을 위한 약간의 S3 비용 정도만 발생합니다. (제 기준 전기세 만원, S3 비용으로 월 1.N달러를 내고 있습니다.) 해당 목표를 달성하기 위해, 손이 좀 더 가더라도 유료 서비스의 오픈소스 대안을 제공합니다. 하지만 필요하다면, 가이드를 따르지 않고 유료 서비스를 사용해도 무방합니다. 교체가 용이한 인프라 혹시 노드에 이상이 발생하더라도, 고장난 Node를 교체하기 용이하게 시스템을 구축합니다. 이를 위해 가능한 소비자용 하드웨어 (여러분이 다나와에서 살 수 있다는 뜻입니다.) 를 이용해 시스템을 구축합니다. 취미 생활을 위한 완벽한 All In One 가이드 분산 시스템을 구축하거나, 머신러닝 서버를 구축하거나, 엔터프라이즈에서 가능한 대부분의 워크로드를 소화할 수 있는 시스템을 만듭니다. 쉬운 가이드 (가능한 열심히 노력 예정) 프로젝트 특성상, 알아야 하는 부분이 정말 많고 어려운 부분이 많습니다. 하지만 이 가이드는 숙련자를 위했다기보단, 새로 시작하는 초보자가 따라할 수 있도록 작성할 예정입니다. 제가 헷갈렸던.. 그리고 왜 쓰는지 몰랐던 부분들을 Reference 섹션에 옴니버스 식으로 작성해 볼 예정입니다. 만약 가이드가 어렵다면, 이해하는데 도움이 되는 페이지를 링크해 둘 테니 한번 읽어보세요. 이 가이드는 다음을 목표로 하지 않습니다 고성능 홈 클러스터에서 수천, 수백 RPS를 처리하는 시스템에 대해 다루지 않습니다. 완벽한 고가용성 물론 클러스터 레벨에서 고가용성 및 백업을 고려합니다. 다만 시스템을 단순화하기 위해, 장애 발생시 N분(숙련자 기준)~N시간(초보자 기준) 정도의 다운타임을 허용합니다. 가이드의 목표는 완벽한 고가용성 시스템 제공 보다는, 문제가 생겼을 때 어떻게든 복구할 수 있는 시스템 에 더 맞춰져 있습니다. 가이드를 따라왔을때 얻을 수 있는것 Private Network와 Public Network간의 차이에 대해 이해하고, 간단한 내부 망을 구축할 수 있게 됩니다. Kuberenetes와 Helm Chart에 대한 기본적인 이해, GitOps의 장점과 ArgoCD를 통한 배포 경험을 얻을 수 있습니다. N개의 교체 가능하고, 확장/축소 가능한 노드를 구성합니다. 쉽게 말하면, 필요할 때 추가로 컴퓨터 끼우고 뺄 수 있다는 뜻입니다. N개의 교체 가능한 분산 스토리지를 구축합니다. 쉽게 말하면, 필요할 때 아무 컴퓨터에나 추가로 SSD나 HDD 끼우고 뺄 수 있다는 뜻입니다. MetalLB 를 이용하여 베어 메탈 환경에서 ARP 프로토콜을 이용해 로드 밸런서를 구축합니다. 쉽게 말하면, 내 특정 사설 IP (192.168.0.x) 로 들어갔을 때 실제 서비스가 어떤 Node에 떠있는지 상관 없이 내 서비스에 접근할 수 있게 됩니다. 다음은 가이드에서 취사선택 가능한 부분입니다 Minio S3 호환 스토리지를 설치하여, 각 컴퓨터에 설치한 HDD, SSD를 S3형태로 사용할 수 있습니다. CloudnativePG를 설치하여 분산 데이터베이스를 구축하고, 주기적으로 S3에 데이터베이스 스냅샷을 백업합니다. Bitnami Redis Helm Chart 를 이용하여 Sentinel 모드의 Redis를 설치합니다. Zot OCI 호환 스토리지를 설치하여, Docker Image를 Private 레지스트리에 저장하고, 내 클러스터에서 가져올 수 있게 합니다. 준비 완료! 좋아요. 길게 이야기했지만 결론적으로 이야기하면, \u0026ldquo;컴퓨터를 좋아하는 사람이 이것저것 해 볼 수 있는, 값싼 클러스터\u0026quot;를 만드는게 우리의 목표입니다.\n이정도면 목표 설정은 충분한 것 같죠?\n다음 글에서는 저희가 만들 쿠버네티스란 무엇인지에 대해 설명할 예정입니다.\n","date":"2025-04-07","id":2,"permalink":"/docs/introduction/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%EB%AA%A9%ED%91%9C/","summary":"\u003cp\u003e무엇을 시작하기 전에, 목표를 설정하는 것은 일반적으로 꽤 좋은 방법입니다.\u003c/p\u003e\n\u003cp\u003e따라서, 가이드를 시작하기 전에 우리 가이드의 목적에 대해 적어보려고 합니다.\u003c/p\u003e","tags":[],"title":"클러스터 디자인 목표"},{"content":"\r주의! 쿠버네티스에 대해 안다면 이 글은 넘기셔도 됩니다.\n그리고, 이 글을 읽기 전에, 도커가 뭔지 모른다면 도커가 도대체 뭘까요.. 를 먼저 읽어보시는걸 권합니다.\n쿠버네티스란 무엇일까요?\n// WIP\n","date":"2025-04-17","id":3,"permalink":"/docs/introduction/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94-wip/","summary":"\u003cdiv class=\"callout callout-tip d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003e주의! 쿠버네티스에 대해 안다면 이 글은 넘기셔도 됩니다.\u003c/p\u003e","tags":[],"title":"쿠버네티스란 무엇인가요? (WIP)"},{"content":"","date":"2023-09-07","id":4,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"도커가 뭔데? 하고 인터넷에 검색하면 Docker란 리눅스 컨테이너에 리눅스 어플리케이션을 프로세스 격리 기술을 사용하여 가상화하여\u0026hellip; 라는 글이 보통 나옵니다.\n그러면 어.. 그럼 가상화는 뭐고 격리는 또 왜하는건데\u0026hellip;. 라는 생각이 저는 들었습니다.\n새로운 기술을 배울 때 제가 생각하는 가장 좋은 방법은, \u0026ldquo;그래서 이거 왜 씀?\u0026rdquo; 에 대한 답변을 먼저 찾는 것입니다.\n그래서? 도커가 없었을 때 왜 삶이 피폐했는지, 도커가 어떻게 삶의 질을 향상시켰는지? 이야기를 하려고 합니다.\n도커가 없던 먼 옛날.. (설명을 위한 과장이 포함되어 있습니다.)\n개발자 A는 Node로 월급을 받아서 다음달 월세를 내고 있습니다. Node 20으로 우분투에서 서버를 짭니다. 그리고 우분투 EC2 두대에 Node 20을 깔고 서버를 배포합니다. 잘 동작해요! A는 행복합니다.\n그리고\u0026hellip; Node 22가 나왔습니다. 신버전 나왔으면 깔아야겠죠? A는 자기 로컬에서 노드를 22 버전으로 올리고, 다시 개발을 열심히 합니다.\n그리고 서버에다가 코드를 올렸더니.. 앗! 서버 노드가 20이라 뭔가 잘 안 됩니다!\n그래서\u0026hellip; A는 각 서버에 접속해서 Node를 22로 업데이트 하고.. 다시 서버를 굴립니다. 아무튼? 예상치 못한 이슈가 생겨서 노드 버전 올린다고 한 한시간쯤 까먹긴 했지만, 아무튼 돌아가니 행복합니다.\n그리고\u0026hellip; 사업이 잘 되어서 새로 동료가 들어옵니다. 새 동료는 자기는 맥북이 너무 편해서 맥북을 쓴다고 합니다. 쓰고싶으면 써야죠..\n그리고 뭔가 동료가 새 기능을 올립니다. 음.. 동료 컴퓨터에서 도는거 보니 잘 도는 것 같습니다. 그리고 서버에 올립니다.\n앗! 뭔가 MacOS에서는 도는데 우분투에서는 안 도는게 있는 것 같습니다. 어\u0026hellip; 뭐가문제지? 일단 또 롤백합니다.\n그리고 도와주려고 pull 땡겨서 제 로컬에서 돌려봅니다. 근데 안 도네요. 그래서 옆자리 동료한테 가니 거기서는 또 잘 돕니다.. 아.. 머리가 아픕니다.\n일단 또 어떻게어떻게 하다 보니 이 라이브러리 문제인 것 같습니다. 아무튼 고치고 배포하니까 또 돌아가니까 행복합니다.\n앗! 그 사이에 우리 사업이 좀 잘 되어서, 서버를 증설해야 할 것 같습니다. EC2를 2대 추가로 띄웁니다. 그리고 Node 22 버전을 다시 깝니다. 그리고 서버를 배포합니다. 와! 잘 돕니다. A는 다시 행복합니다.\n그리고.. 새로운 기능을 만들어서.. 또 서버 4개에 배포합니다.\n앗! 근데 최근에 추가한 서버에서는 잘 도는데, 예전 버전 서버에서는 안 돕니다. 뭐지? 똑같은 노드 22인데? 하고 버전을 쳐 보니, lts 버전으로 깔았는데 최근에 추가한 서버는 node v22.13.0이고, 예전 서버는 node v22.1.0이네요. 아\u0026hellip;. 일단 옛날 서버에서 노드 버전을 일단 올려봅니다.. 아\u0026hellip; 최신 버전으로 올렸더니 이번엔 node v22.14.0이 깔렸네요.. 또 버전이 다릅니다\u0026hellip;.. 그럼 신규 서버도 일단 버전 올려서 맞춰야겠네요.\nEC2 4대까진 할만합니다. 근데 서버가 8대면..? 16대면\u0026hellip;?\n환경 정리가 안 되니까 삶이 고달파집니다 물론? 위 예시는 과장입니다. 사실 Node 위에서 도는 라이브러리는 OS따라 돌던게 안 도는 경우는 이미지처리 하는 경우가 아니면 흔하진 않습니다. 또 노드 마이너 패치한다고 서버가 깨지고 잘 그러진 않습니다.\n(물론 Python으로 서버 짜고 있으면 이야기가 다릅니다.)\n근데 서버에 깔려있는게 Node 하나밖에 없을까요? Nginx 혹시 쓰시나요? OS Binary 의존성 있는 라이브러리 혹시 하나라도 있나요? 그거 버전 다 맞출 자신이 있을까요?\n그래서? Docker가 나왔습니다 매번 저러지 말고 그냥 OS째로 말아서 올려버리는건 어떨까요?\n우분투 24.04에, Node v22.14.0 깔고, Node 라이브러리 다 깔아서 node_modules 폴더 있는 째로 저장하고, 이미지 처리하는데 쓰는 Binary 파일도 미리 받아놓은 이미지 란걸로 만들어서 딱 해당 이미지를 실행만 시키면 되게 만들면 어떨까요?\n그리고 서버에는 Node도, node_modules도, Binary 파일도 다운받지 말고 딱 미리 만들어놓은 저 이미지를 실행만 시키면 어떨까요?\n서버에는 저 이미지를 실행시키는데 필요한 Docker Engine이라는 프로그램만 설치해 두면, 고달픈 삶으로부터 벗어날 수 있습니다!\n그게 바로 도커의 아이디어입니다.\nDocker를 쓰면 뭐가 좋을까요? 대충 이해하셨죠?\n그래서 도커를 쓰면, 다음이 달성 가능합니다.\n아무튼, 도커 이미지가 \u0026ldquo;돌기만\u0026rdquo; 하면 동작 자체는 같음을 보장합니다. 서버에 직접 하나하나 깔 필요 없이, 도커 엔진을 깐다 -\u0026gt; 이미지를 땡긴다 -\u0026gt; 이미지를 돌린다. 로 프로그램 실행을 표준화 할 수 있습니다. 여기서 설명은 안 했지만 이런 장점들도 있습니다.\n신묘한 가상화 기술로, 각 컨테이너 (실행 중인 이미지를 컨테이너라고 합니다) 는 격리된 환경에서 실행됩니다. 쉽게 말하면, 환경 꼬일 걱정 없고 한 컨테이너가 털려도, 시스템상 격리되어 있어 다른 컨테이너까지 털어먹기 어렵다는 뜻입니다. 이미지 용량이 작고 성능저하가 적습니다. 호스트 머신(= 서버) 의 성능의 거의 대부분을 성능 손실 없이 사용할 수 있습니다. 기존 VM 기술은 성능을 꽤 많이 깎아먹었거든요. 그래서? 이제 도커가 뭔지도 알고 왜 쓰는지도 알겠어. 까지 오셨으면? 어떻게 쓰는지는 인터넷에 찾으면 대충 나옵니다.\n개인적으로는 생활코딩님의 Docker 입문 수업을 추천합니다. 설명 정말 잘 해주세요!\n그리고, Docker 쓰는 법을 배우셨으면 Docker compose 를 이용해서 복잡한 도커 컨테이너를 제어하기 까지 배워보시는걸 강력하게 추천합니다. Docker를 알고 있다면 어렵지도 않고, Compose로 환경 구성하는 경우가 정말정말 자주 있습니다. 꼭 여기까지는 배워두는걸 추천드립니다!\n감사합니다! 기존에 보시던 가이드에서 다시 봐요!\n","date":"2025-04-17","id":5,"permalink":"/docs/reference/%EB%8F%84%EC%BB%A4%EA%B0%80-%EB%8F%84%EB%8C%80%EC%B2%B4-%EB%AD%98%EA%B9%8C%EC%9A%94../","summary":"\u003cp\u003e도커가 뭔데? 하고 인터넷에 검색하면 Docker란 리눅스 컨테이너에 리눅스 어플리케이션을 프로세스 격리 기술을 사용하여 가상화하여\u0026hellip; 라는 글이 보통 나옵니다.\u003c/p\u003e\n\u003cp\u003e그러면 어.. 그럼 가상화는 뭐고 격리는 또 왜하는건데\u0026hellip;. 라는 생각이 저는 들었습니다.\u003c/p\u003e","tags":[],"title":"도커가 도대체 뭘까요.."},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":6,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":7,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2025-04-06","id":8,"permalink":"/","summary":"","tags":[],"title":"HomeCloud | Main"},{"content":"","date":"2023-09-07","id":9,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"0001-01-01","id":10,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":11,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":12,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]